{
  "auth": {
    "userName": "dev-dong-su",
    "githubLink": "https://github.com/dev-dong-su",
    "profileImage": "https://avatars.githubusercontent.com/u/49144050?v=4"
  },
  "posts": [
    {
      "id": 1,
      "title": "제목이슈",
      "userInfo": {
        "userName": "dev-dong-su",
        "githubLink": "https://github.com/dev-dong-su",
        "profileImage": "https://avatars.githubusercontent.com/u/49144050?v=4"
      },
      "category": "FRONTEND",
      "tags": [
        {
          "text": "리펙토링"
        },
        {
          "text": "버그"
        }
      ],
      "contents": "React의 Hook으로, 둘 다 컴포넌트의 라이프사이클에 사이드 이펙트(side effects)를 수행하기 위해 사용됩니다. 그러나 두 훅 사이에는 몇 가지 중요한 차이점이 있습니다.\n\n1. **실행 시점**:\n    - [[useEffect]]: 비동기적으로 실행되며, DOM 변화가 화면에 렌더링된 후에 실행됩니다. 즉, 브라우저가 렌더링 작업을 완료한 후에 비동기적으로 호출됩니다. 따라서 이로 인해 화면이 깜빡거릴 수 있습니다.\n    - **`useLayoutEffect`**: 동기적으로 실행되며, DOM 변화가 화면에 렌더링되기 **전**에 실행됩니다. 이는 과거의 **`componentWillMount`** 라이프사이클 메서드와 비슷한 시점에 실행됩니다.\n2. **사용 사례**:\n    - **`useEffect`**: 대부분의 사이드 이펙트는 **`useEffect`**에서 처리됩니다. 데이터 가져오기, DOM 업데이트, 이벤트 리스너 등록과 같은 작업을 처리하는 데 적합합니다.\n    - **`useLayoutEffect`**: DOM과 직접적으로 상호 작용하는 작업, 예를 들어 렌더링 직후에 DOM의 크기나 위치를 읽어야 하는 경우에 사용합니다. **`useEffect`**에서 이러한 작업을 수행하면 화면이 깜빡거릴 수 있습니다.\n3. **서버 사이드 렌더링 (SSR)**:\n    - **`useEffect`**: 서버 사이드 렌더링과 잘 동작합니다. 서버에서는 무시되며, 클라이언트에서만 실행됩니다.\n    - **`useLayoutEffect`**: SSR과 함께 사용될 때 경고가 발생할 수 있습니다. SSR에서는 **`useLayoutEffect`** 코드가 실행되지 않으므로 클라이언트에서 첫 렌더링이 발생할 때 동기적인 변경이 이루어질 수 있습니다.\n\n- 요약 둘은 시점이 다름 render와 paint 이후 실행되는 useEffect, render이후 paint 전에 실행되는 useLayoutEffect\n- paint이후 실행되는 useEffect는 돔트리를 업데이트 하기 때문에 화면의 깜빡임을 볼 수 있음\n"
    },
    {
      "id": 2,
      "title": "제목이슈",
      "category": "BACKEND",
      "userInfo": {
        "userName": "dev-dong-su",
        "githubLink": "https://github.com/dev-dong-su",
        "profileImage": "https://avatars.githubusercontent.com/u/49144050?v=4"
      },
      "tags": [
        {
          "text": "리펙토링"
        },
        {
          "emoji": "🐛",
          "text": "버그"
        }
      ],
      "contents": "React의 Hook으로, 둘 다 컴포넌트의 라이프사이클에 사이드 이펙트(side effects)를 수행하기 위해 사용됩니다. 그러나 두 훅 사이에는 몇 가지 중요한 차이점이 있습니다.\n\n1. **실행 시점**:\n    - [[useEffect]]: 비동기적으로 실행되며, DOM 변화가 화면에 렌더링된 후에 실행됩니다. 즉, 브라우저가 렌더링 작업을 완료한 후에 비동기적으로 호출됩니다. 따라서 이로 인해 화면이 깜빡거릴 수 있습니다.\n    - **`useLayoutEffect`**: 동기적으로 실행되며, DOM 변화가 화면에 렌더링되기 **전**에 실행됩니다. 이는 과거의 **`componentWillMount`** 라이프사이클 메서드와 비슷한 시점에 실행됩니다.\n2. **사용 사례**:\n    - **`useEffect`**: 대부분의 사이드 이펙트는 **`useEffect`**에서 처리됩니다. 데이터 가져오기, DOM 업데이트, 이벤트 리스너 등록과 같은 작업을 처리하는 데 적합합니다.\n    - **`useLayoutEffect`**: DOM과 직접적으로 상호 작용하는 작업, 예를 들어 렌더링 직후에 DOM의 크기나 위치를 읽어야 하는 경우에 사용합니다. **`useEffect`**에서 이러한 작업을 수행하면 화면이 깜빡거릴 수 있습니다.\n3. **서버 사이드 렌더링 (SSR)**:\n    - **`useEffect`**: 서버 사이드 렌더링과 잘 동작합니다. 서버에서는 무시되며, 클라이언트에서만 실행됩니다.\n    - **`useLayoutEffect`**: SSR과 함께 사용될 때 경고가 발생할 수 있습니다. SSR에서는 **`useLayoutEffect`** 코드가 실행되지 않으므로 클라이언트에서 첫 렌더링이 발생할 때 동기적인 변경이 이루어질 수 있습니다.\n\n- 요약 둘은 시점이 다름 render와 paint 이후 실행되는 useEffect, render이후 paint 전에 실행되는 useLayoutEffect\n- paint이후 실행되는 useEffect는 돔트리를 업데이트 하기 때문에 화면의 깜빡임을 볼 수 있음\n"
    },
    {
      "title": "asdasd",
      "category": "APP",
      "contents": "qlkfnwqklgnqlenkgelqn",
      "userInfo": {
        "userName": "dev-dong-su",
        "githubLink": "https://github.com/dev-dong-su",
        "profileImage": "https://avatars.githubusercontent.com/u/49144050?v=4"
      },
      "id": 3
    },
    {
      "title": "",
      "contents": "",
      "userInfo": {
        "userName": "dev-dong-su",
        "githubLink": "https://github.com/dev-dong-su",
        "profileImage": "https://avatars.githubusercontent.com/u/49144050?v=4"
      },
      "id": 4
    }
  ],
  "code": [
    {
      "id": 1,
      "postId": 1,
      "file": {
        "name": "root",
        "type": "folder",
        "path": "/root",
        "children": [
          {
            "name": "file1.tsx",
            "type": "file",
            "path": "/root/subfolder/file1.tsx"
          },
          {
            "name": "file2.tsx",
            "type": "file",
            "path": "/root/subfolder/file2.tsx"
          },
          {
            "name": "subfolder",
            "type": "folder",
            "children": [
              {
                "name": "file3.md",
                "type": "file",
                "path": "/root/subfolder/file3.md"
              }
            ]
          }
        ]
      }
    }
  ],
  "reviews": [
    {
      "id": 1,
      "filePath": "src/hooks/useDebouncedCallback.ts",
      "contents": "React의 Hook으로, 둘 다 컴포넌트의 라이프사이클에 사이드 이펙트(side effects)를 수행하기 위해 사용됩니다. 그러나 두 훅 사이에는 몇 가지 중요한 차이점이 있습니다.\n\n1. **실행 시점**:\n    - [[useEffect]]: 비동기적으로 실행되며, DOM 변화가 화면에 렌더링된 후에 실행됩니다. 즉, 브라우저가 렌더링 작업을 완료한 후에 비동기적으로 호출됩니다. 따라서 이로 인해 화면이 깜빡거릴 수 있습니다.\n    - **`useLayoutEffect`**: 동기적으로 실행되며, DOM 변화가 화면에 렌더링되기 **전**에 실행됩니다. 이는 과거의 **`componentWillMount`** 라이프사이클 메서드와 비슷한 시점에 실행됩니다.\n2. **사용 사례**:\n    - **`useEffect`**: 대부분의 사이드 이펙트는 **`useEffect`**에서 처리됩니다. 데이터 가져오기, DOM 업데이트, 이벤트 리스너 등록과 같은 작업을 처리하는 데 적합합니다.\n    - **`useLayoutEffect`**: DOM과 직접적으로 상호 작용하는 작업, 예를 들어 렌더링 직후에 DOM의 크기나 위치를 읽어야 하는 경우에 사용합니다. **`useEffect`**에서 이러한 작업을 수행하면 화면이 깜빡거릴 수 있습니다.\n3. **서버 사이드 렌더링 (SSR)**:\n    - **`useEffect`**: 서버 사이드 렌더링과 잘 동작합니다. 서버에서는 무시되며, 클라이언트에서만 실행됩니다.\n    - **`useLayoutEffect`**: SSR과 함께 사용될 때 경고가 발생할 수 있습니다. SSR에서는 **`useLayoutEffect`** 코드가 실행되지 않으므로 클라이언트에서 첫 렌더링이 발생할 때 동기적인 변경이 이루어질 수 있습니다.\n\n- 요약 둘은 시점이 다름 render와 paint 이후 실행되는 useEffect, render이후 paint 전에 실행되는 useLayoutEffect\n- paint이후 실행되는 useEffect는 돔트리를 업데이트 하기 때문에 화면의 깜빡임을 볼 수 있음\n",
      "highlight": {
        "highlightStart": 15,
        "highlightEnd": 20
      }
    },
    {
      "id": 2,
      "filePath": "src/hooks/useDebouncedCallback.ts",
      "contents": "React의 Hook으로, 둘 다 컴포넌트의 라이프사이클에 사이드 이펙트(side effects)를 수행하기 위해 사용됩니다. 그러나 두 훅 사이에는 몇 가지 중요한 차이점이 있습니다.\n\n1. **실행 시점**:\n    - [[useEffect]]: 비동기적으로 실행되며, DOM 변화가 화면에 렌더링된 후에 실행됩니다. 즉, 브라우저가 렌더링 작업을 완료한 후에 비동기적으로 호출됩니다. 따라서 이로 인해 화면이 깜빡거릴 수 있습니다.\n    - **`useLayoutEffect`**: 동기적으로 실행되며, DOM 변화가 화면에 렌더링되기 **전**에 실행됩니다. 이는 과거의 **`componentWillMount`** 라이프사이클 메서드와 비슷한 시점에 실행됩니다.\n2. **사용 사례**:\n    - **`useEffect`**: 대부분의 사이드 이펙트는 **`useEffect`**에서 처리됩니다. 데이터 가져오기, DOM 업데이트, 이벤트 리스너 등록과 같은 작업을 처리하는 데 적합합니다.\n    - **`useLayoutEffect`**: DOM과 직접적으로 상호 작용하는 작업, 예를 들어 렌더링 직후에 DOM의 크기나 위치를 읽어야 하는 경우에 사용합니다. **`useEffect`**에서 이러한 작업을 수행하면 화면이 깜빡거릴 수 있습니다.\n3. **서버 사이드 렌더링 (SSR)**:\n    - **`useEffect`**: 서버 사이드 렌더링과 잘 동작합니다. 서버에서는 무시되며, 클라이언트에서만 실행됩니다.\n    - **`useLayoutEffect`**: SSR과 함께 사용될 때 경고가 발생할 수 있습니다. SSR에서는 **`useLayoutEffect`** 코드가 실행되지 않으므로 클라이언트에서 첫 렌더링이 발생할 때 동기적인 변경이 이루어질 수 있습니다.\n\n- 요약 둘은 시점이 다름 render와 paint 이후 실행되는 useEffect, render이후 paint 전에 실행되는 useLayoutEffect\n- paint이후 실행되는 useEffect는 돔트리를 업데이트 하기 때문에 화면의 깜빡임을 볼 수 있음\n",
      "highlight": {
        "highlightStart": 15,
        "highlightEnd": 20
      }
    }
  ],
  "file": [
    {
      "fileName": "useDebouncedCallback.ts",
      "filePath": "src/hooks/useDebouncedCallback.tsx"
    }
  ],
  "filePath": {
    "code": "import { useCallback, useState } from 'react';  \n  \ntype CallbackFunction = (...params: unknown[]) => void;  \n  \ninterface useDebouncedCallbackProps {  \n  target: CallbackFunction;  \n  delay: number;  \n}  \n  \nconst useDebouncedCallback = ({ target, delay }: useDebouncedCallbackProps) => {  \n  const [timerId, setTimerId] = useState<NodeJS.Timeout | null>(null);  \n  \n  return useCallback(  \n    (...params: Parameters<CallbackFunction>) => {  \n      if (timerId) {  \n        clearTimeout(timerId);  \n      }  \n  \n      const newTimerId = setTimeout(() => {  \n        target(...params);  \n      }, delay);  \n  \n      setTimerId(newTimerId);  \n    },  \n    [target, delay, timerId],  \n  );  \n};  \n  \nexport default useDebouncedCallback;"
  },
  "comments": [
    {
      "id": 1,
      "body": "some comment",
      "postId": 1
    }
  ],
  "profile": {
    "name": "typicode"
  }
}