export const buttonCodeDummy =
  'const Button = ({\n' +
  '  content,\n' +
  '  onClick,\n' +
  '  wrapper,\n' +
  '  disabled,\n' +
  "  size = 'medium',\n" +
  '  show = true,\n' +
  '  color,\n' +
  "  text = 'white',\n" +
  '}: ButtonProps) => {\n' +
  '  return (\n' +
  '    <Styled.ButtonContainer css={wrapper}>\n' +
  '      <Styled.Button\n' +
  '        onClick={onClick}\n' +
  '        disabled={disabled}\n' +
  '        show={show}\n' +
  '        size={size}\n' +
  '        text={text}\n' +
  '        color={color}\n' +
  '      >\n' +
  '        {content}\n' +
  '      </Styled.Button>\n' +
  '    </Styled.ButtonContainer>\n' +
  '  );\n' +
  '};\n' +
  '\n' +
  'export default Button;\n';

export const markdownDummy =
  '# TCP 슬로우 스타트 14kb rule\n' +
  '* 첫 응답 패킷은 14kb 네트워크 통신의 속도 조절 알고리즘 TCP 슬로우 스타트에 의해 정해진 것\n' +
  '* 슬로우 스타트는 네트워크의 최대 대역폭을 파악할 수 있을 때까지 점진적으로 전송량을 증가시키는것\n' +
  '* 이 방식에 따라 첫 패킷 이후에 2배씩 패킷 사이즈를 증가시킴 \n' +
  '* 초기 패킷이 14kb이므로 웹 최적화시 초기 14kb를 염두해야하는 이유\n' +
  '* TCP 슬로우 스타트는 혼잡을 피하기 위해서 네트워크의 용량에 적당한 전송 속도를 찾고자 점진적으로 속도를 높여나가는 방식';

export const markdownDummy2 =
  '\n' +
  '# 1. DNS 조회\n' +
  '* 먼저 사용자가 브라우저에 https://snack.me를 주소창에 입력하고 한번도 방문한 적 없다면 DNS 조회가 필요함\n' +
  '* 브라우저는 DNS 조회를 요청하고 최종적으로 네임서버에 의해 처리되고 IP주소로 응답함.\n' +
  '* 최초 요청 후 IP는 일정 기간 캐시됨\n' +
  '* DNS 조회는 호스트 이름 하나당 한 번 수행됨. 하지만 DNS 조회 시  페이지에 글꼴, 이미지등이 다른 호스트 이름을 가지고 있으면 DNS 는 각각의 호스트들을 조회 해야함\n' +
  '* 페이지 성능에 악영향을 줄 수 있음\n' +
  '# 2. 3 Way hand shack\n' +
  '* IP 주소를 알게되면 브라우저는 쓰리 핸드셰이크를 통해서 연결을 설정함\n' +
  '* TCP 세션을 협상하고 시작하기 위해서 3개의 메시지를 서로 주고받음\n' +
  '# 3. TLS 협상\n' +
  '* HTTPS를 사용중이라면 또 다른 핸드셰이크가 필요함\n' +
  '* 통신에서 쓰일 암호를 결정하고, 서버를 확인하고, 실제 데이터를 전송 전에 안전한 연결이 이루어지도록 함\n' +
  '* 실제로 3번의 요청이 한번더 왔다갔다함\n' +
  '# 4. 응답\n' +
  '* 웹서버로 한 번 연결이 성립되면 브라우저가 유저 대신에 초기 GET 요청을 보냄 웹사이트는 대게 HTML 파일을 요청\n' +
  '* 서버가 요청을 받으면 관련 응답 해더와 HTML의 내용을 응답함\n' +
  '# 5. TCP 슬로우 스타트 14kb rule\n' +
  '* 첫 응답 패킷은 14kb 네트워크 통신의 속도 조절 알고리즘 TCP 슬로우 스타트에 의해 정해진 것\n' +
  '* 슬로우 스타트는 네트워크의 최대 대역폭을 파악할 수 있을 때까지 점진적으로 전송량을 증가시키는것\n' +
  '* 이 방식에 따라 첫 패킷 이후에 2배씩 패킷 사이즈를 증가시킴 \n' +
  '* 초기 패킷이 14kb이므로 웹 최적화시 초기 14kb를 염두해야하는 이유\n' +
  '* TCP 슬로우 스타트는 혼잡을 피하기 위해서 네트워크의 용량에 적당한 전송 속도를 찾고자 점진적으로 속도를 높여나가는 방식\n' +
  '\n' +
  '\t*혼잡제어*\n' +
  '\t* 서버가 TCP 패킷으로 데이터를 보내고 사용자의 클라이언트는 확인 응답(acknowledgements, ACKs)을 보내면서 데이터의 수신을 확인. \n' +
  '\t* 연결은 하드웨어나 네트워크 상태에 따라서 제한된 용량\n' +
  '\t* 만약 서버가 패킷을 너무 빠르게 보내게 되면, 그 패킷들은 무시됨 -> 확인 응답이 없음.\n' +
  '\t* 서버는 이를 누락된 확인 응답으로 파악함 혼잡 제어 알고리즘은 보내진 패킷의 흐름과 확인 응답을 바탕으로 전송 속도를 결정합니다.\n' +
  '\n' +
  '# 6. 구문 분석\n';
